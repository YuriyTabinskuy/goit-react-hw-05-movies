{"version":3,"file":"static/js/712.06762ec9.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/Movies.jsx"],"sourcesContent":["import {\n  Grid,\n  GridItem,\n  MovieTitle,\n} from 'components/MoviesList/MoviesList.styled';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  const selectUrl = id => {\n    if (location.pathname === '/movies') {\n      return `${id}`;\n    }\n\n    return `movies/${id}`;\n  };\n\n  return (\n    <Grid>\n      {movies.map(({ id, title, poster_path }) => (\n        <GridItem key={id}>\n          <Link to={selectUrl(id)} state={{ from: location }}>\n            <img\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                  : 'https://images.squarespace-cdn.com/content/v1/5a79de08aeb625f12ad4f85a/1527015265032-KYY1AQ4NCW6NB7BK1NDH/placeholder-image-vertical.png'\n              }\n              alt={title}\n            />\n            <MovieTitle>{title}</MovieTitle>\n          </Link>\n        </GridItem>\n      ))}\n    </Grid>\n  );\n};\n","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  justify-content: center;\n  gap: 8px;\n`;\n","import { useEffect } from 'react';\nimport { Field, Formik } from 'formik';\nimport { StyledForm } from './Searchbar.styled';\nimport { useSearchParams } from 'react-router-dom';\n\nexport const Searchbar = ({ onQueryChange }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('name') ?? '';\n\n  useEffect(() => {\n    if (!movieName) return;\n\n    onQueryChange(movieName);\n  }, [movieName, onQueryChange]);\n\n  const handleSubmit = (values, actions) => {\n    const searchValue = values.search;\n\n    const nextParams = searchValue !== '' ? { name: searchValue } : {};\n    setSearchParams(nextParams);\n\n    actions.resetForm();\n  };\n\n  return (\n    <>\n      <Formik initialValues={{ search: '' }} onSubmit={handleSubmit}>\n        <StyledForm>\n          <Field type=\"text\" name=\"search\" required />\n          <button type=\"submit\"> Search</button>\n        </StyledForm>\n      </Formik>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { getMovieByName } from 'services/api';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Movies() {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!query) return;\n\n    const fetchMovies = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const moviesData = await getMovieByName(query);\n\n        setMovies(moviesData);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovies();\n  }, [query]);\n\n  const onQueryChange = newQuery => {\n    setQuery(newQuery);\n  };\n\n  return (\n    <>\n      <Searchbar onQueryChange={onQueryChange} />\n      {isLoading && <Loader />}\n      {error && <p>{error} </p>}\n      {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n    </>\n  );\n}\n"],"names":["MoviesList","_ref","movies","location","useLocation","selectUrl","id","pathname","concat","_jsx","Grid","children","map","_ref2","title","poster_path","GridItem","_jsxs","Link","to","state","from","src","alt","MovieTitle","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Searchbar","_searchParams$get","onQueryChange","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","movieName","get","useEffect","_Fragment","Formik","initialValues","search","onSubmit","values","actions","searchValue","name","resetForm","Field","type","required","Movies","_useState","useState","_useState2","query","setQuery","_useState3","_useState4","setMovies","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","error","setError","fetchMovies","_asyncToGenerator","_regeneratorRuntime","_callee","moviesData","_context","prev","next","getMovieByName","sent","t0","message","finish","stop","apply","arguments","newQuery","Loader","length"],"sourceRoot":""}